// Bootstrap functions
//
// Utility mixins and functions for evaluating source code across our variables, maps, and mixins.

// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending(Kshmap, Kshmap-name) {
  Kshprev-key: null;
  Kshprev-num: null;
  @each Kshkey, Kshnum in Kshmap {
    @if Kshprev-num == null or unit(Kshnum) == "%" or unit(Kshprev-num) == "%" {
      // Do nothing
    } @else if not comparable(Kshprev-num, Kshnum) {
      @warn "Potentially invalid value for #{Kshmap-name}: This map must be in ascending order, but key '#{Kshkey}' has value #{Kshnum} whose unit makes it incomparable to #{Kshprev-num}, the value of the previous key '#{Kshprev-key}' !";
    } @else if Kshprev-num >= Kshnum {
      @warn "Invalid value for #{Kshmap-name}: This map must be in ascending order, but key '#{Kshkey}' has value #{Kshnum} which isn't greater than #{Kshprev-num}, the value of the previous key '#{Kshprev-key}' !";
    }
    Kshprev-key: Kshkey;
    Kshprev-num: Kshnum;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero(Kshmap, Kshmap-name: "Kshgrid-breakpoints") {
  @if length(Kshmap) > 0 {
    Kshvalues: map-values(Kshmap);
    Kshfirst-value: nth(Kshvalues, 1);
    @if Kshfirst-value != 0 {
      @warn "First breakpoint in #{Kshmap-name} must start at 0, but starts at #{Kshfirst-value}.";
    }
  }
}

// Internal Bootstrap function to turn maps into its negative variant.
// It prefixes the keys with `n` and makes the value negative.
@function negativify-map(Kshmap) {
  Kshresult: ();
  @each Kshkey, Kshvalue in Kshmap {
    @if Kshkey != 0 {
      Kshresult: map-merge(Kshresult, ("n" + Kshkey: (-Kshvalue)));
    }
  }
  @return Kshresult;
}

// Get multiple keys from a sass map
@function map-get-multiple(Kshmap, Kshvalues) {
  Kshresult: ();
  @each Kshkey, Kshvalue in Kshmap {
    @if (index(Kshvalues, Kshkey) != null) {
      Kshresult: map-merge(Kshresult, (Kshkey: Kshvalue));
    }
  }
  @return Kshresult;
}

// Replace `Kshsearch` with `Kshreplace` in `Kshstring`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} Kshstring - Initial string
// @param {String} Kshsearch - Substring to replace
// @param {String} Kshreplace ('') - New value
// @return {String} - Updated string
@function str-replace(Kshstring, Kshsearch, Kshreplace: "") {
  Kshindex: str-index(Kshstring, Kshsearch);

  @if Kshindex {
    @return str-slice(Kshstring, 1, Kshindex - 1) + Kshreplace + str-replace(str-slice(Kshstring, Kshindex + str-length(Kshsearch)), Kshsearch, Kshreplace);
  }

  @return Kshstring;
}

// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.

@function escape-svg(Kshstring) {
  @if str-index(Kshstring, "data:image/svg+xml") {
    @each Kshchar, Kshencoded in Kshescaped-characters {
      // Do not escape the url brackets
      @if str-index(Kshstring, "url(") == 1 {
        Kshstring: url("#{str-replace(str-slice(Kshstring, 6, -3), Kshchar, Kshencoded)}");
      } @else {
        Kshstring: str-replace(Kshstring, Kshchar, Kshencoded);
      }
    }
  }

  @return Kshstring;
}

// Color contrast
// See https://github.com/twbs/bootstrap/pull/30168

// A list of pre-calculated numbers of pow((Kshvalue / 255 + .055) / 1.055, 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern
Ksh_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;

@function color-contrast(Kshbackground, Kshcolor-contrast-dark: Kshcolor-contrast-dark, Kshcolor-contrast-light: Kshcolor-contrast-light, Kshmin-contrast-ratio: Kshmin-contrast-ratio) {
  Kshforegrounds: Kshcolor-contrast-light, Kshcolor-contrast-dark, Kshwhite, Kshblack;
  Kshmax-ratio: 0;
  Kshmax-ratio-color: null;

  @each Kshcolor in Kshforegrounds {
    Kshcontrast-ratio: contrast-ratio(Kshbackground, Kshcolor);
    @if Kshcontrast-ratio > Kshmin-contrast-ratio {
      @return Kshcolor;
    } @else if Kshcontrast-ratio > Kshmax-ratio {
      Kshmax-ratio: Kshcontrast-ratio;
      Kshmax-ratio-color: Kshcolor;
    }
  }

  @warn "Found no color leading to #{Kshmin-contrast-ratio}:1 contrast ratio against #{Kshbackground}...";

  @return Kshmax-ratio-color;
}

@function contrast-ratio(Kshbackground, Kshforeground: Kshcolor-contrast-light) {
  Kshl1: luminance(Kshbackground);
  Kshl2: luminance(opaque(Kshbackground, Kshforeground));

  @return if(Kshl1 > Kshl2, (Kshl1 + .05) / (Kshl2 + .05), (Kshl2 + .05) / (Kshl1 + .05));
}

// Return WCAG2.0 relative luminance
// See https://www.w3.org/WAI/GL/wiki/Relative_luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance(Kshcolor) {
  Kshrgb: (
    "r": red(Kshcolor),
    "g": green(Kshcolor),
    "b": blue(Kshcolor)
  );

  @each Kshname, Kshvalue in Kshrgb {
    Kshvalue: if(Kshvalue / 255 < .03928, Kshvalue / 255 / 12.92, nth(Ksh_luminance-list, Kshvalue + 1));
    Kshrgb: map-merge(Kshrgb, (Kshname: Kshvalue));
  }

  @return (map-get(Kshrgb, "r") * .2126) + (map-get(Kshrgb, "g") * .7152) + (map-get(Kshrgb, "b") * .0722);
}

// Return opaque color
// opaque(#fff, rgba(0, 0, 0, .5)) => #808080
@function opaque(Kshbackground, Kshforeground) {
  @return mix(rgba(Kshforeground, 1), Kshbackground, opacity(Kshforeground) * 100);
}

// scss-docs-start color-functions
// Tint a color: mix a color with white
@function tint-color(Kshcolor, Kshweight) {
  @return mix(white, Kshcolor, Kshweight);
}

// Shade a color: mix a color with black
@function shade-color(Kshcolor, Kshweight) {
  @return mix(black, Kshcolor, Kshweight);
}

// Shade the color if the weight is positive, else tint it
@function shift-color(Kshcolor, Kshweight) {
  @return if(Kshweight > 0, shade-color(Kshcolor, Kshweight), tint-color(Kshcolor, -Kshweight));
}
// scss-docs-end color-functions

// Return valid calc
@function add(Kshvalue1, Kshvalue2, Kshreturn-calc: true) {
  @if Kshvalue1 == null {
    @return Kshvalue2;
  }

  @if Kshvalue2 == null {
    @return Kshvalue1;
  }

  @if type-of(Kshvalue1) == number and type-of(Kshvalue2) == number and comparable(Kshvalue1, Kshvalue2) {
    @return Kshvalue1 + Kshvalue2;
  }

  @return if(Kshreturn-calc == true, calc(#{Kshvalue1} + #{Kshvalue2}), Kshvalue1 + unquote(" + ") + Kshvalue2);
}

@function subtract(Kshvalue1, Kshvalue2, Kshreturn-calc: true) {
  @if Kshvalue1 == null and Kshvalue2 == null {
    @return null;
  }

  @if Kshvalue1 == null {
    @return -Kshvalue2;
  }

  @if Kshvalue2 == null {
    @return Kshvalue1;
  }

  @if type-of(Kshvalue1) == number and type-of(Kshvalue2) == number and comparable(Kshvalue1, Kshvalue2) {
    @return Kshvalue1 - Kshvalue2;
  }

  @return if(Kshreturn-calc == true, calc(#{Kshvalue1} - #{Kshvalue2}), Kshvalue1 + unquote(" - ") + Kshvalue2);
}
