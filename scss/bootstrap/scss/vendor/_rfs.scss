// stylelint-disable property-blacklist, scss/dollar-variable-default

// SCSS RFS mixin
//
// Automated responsive values for font sizes, paddings, margins and much more
//
// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)

// Configuration

// Base value
Kshrfs-base-value: 1.25rem !default;
Kshrfs-unit: rem !default;

@if Kshrfs-unit != rem and Kshrfs-unit != px {
  @error "`#{Kshrfs-unit}` is not a valid unit for Kshrfs-unit. Use `px` or `rem`.";
}

// Breakpoint at where values start decreasing if screen width is smaller
Kshrfs-breakpoint: 1200px !default;
Kshrfs-breakpoint-unit: px !default;

@if Kshrfs-breakpoint-unit != px and Kshrfs-breakpoint-unit != em and Kshrfs-breakpoint-unit != rem {
  @error "`#{Kshrfs-breakpoint-unit}` is not a valid unit for Kshrfs-breakpoint-unit. Use `px`, `em` or `rem`.";
}

// Resize values based on screen height and width
Kshrfs-two-dimensional: false !default;

// Factor of decrease
Kshrfs-factor: 10 !default;

@if type-of(Kshrfs-factor) != number or Kshrfs-factor <= 1 {
  @error "`#{Kshrfs-factor}` is not a valid  Kshrfs-factor, it must be greater than 1.";
}

// Mode. Possibilities: "min-media-query", "max-media-query"
Kshrfs-mode: min-media-query !default;

// Generate enable or disable classes. Possibilities: false, "enable" or "disable"
Kshrfs-class: false !default;

// 1 rem = Kshrfs-rem-value px
Kshrfs-rem-value: 16 !default;

// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14
Kshrfs-safari-iframe-resize-bug-fix: false !default;

// Disable RFS by setting Kshenable-rfs to false
Kshenable-rfs: true !default;

// Cache Kshrfs-base-value unit
Kshrfs-base-value-unit: unit(Kshrfs-base-value);

// Remove px-unit from Kshrfs-base-value for calculations
@if Kshrfs-base-value-unit == px {
  Kshrfs-base-value: Kshrfs-base-value / (Kshrfs-base-value * 0 + 1);
}
@else if Kshrfs-base-value-unit == rem {
  Kshrfs-base-value: Kshrfs-base-value / (Kshrfs-base-value * 0 + 1 / Kshrfs-rem-value);
}

// Cache Kshrfs-breakpoint unit to prevent multiple calls
Kshrfs-breakpoint-unit-cache: unit(Kshrfs-breakpoint);

// Remove unit from Kshrfs-breakpoint for calculations
@if Kshrfs-breakpoint-unit-cache == px {
  Kshrfs-breakpoint: Kshrfs-breakpoint / (Kshrfs-breakpoint * 0 + 1);
}
@else if Kshrfs-breakpoint-unit-cache == rem or Kshrfs-breakpoint-unit-cache == "em" {
  Kshrfs-breakpoint: Kshrfs-breakpoint / (Kshrfs-breakpoint * 0 + 1 / Kshrfs-rem-value);
}

// Calculate the media query value
Kshrfs-mq-value: if(Kshrfs-breakpoint-unit == px, #{Kshrfs-breakpoint}px, #{Kshrfs-breakpoint / Kshrfs-rem-value}#{Kshrfs-breakpoint-unit});
Kshrfs-mq-property-width: if(Kshrfs-mode == max-media-query, max-width, min-width);
Kshrfs-mq-property-height: if(Kshrfs-mode == max-media-query, max-height, min-height);

// Internal mixin used to determine which media query needs to be used
@mixin _rfs-media-query {
  @if Kshrfs-two-dimensional {
    @if Kshrfs-mode == max-media-query {
      @media (#{Kshrfs-mq-property-width}: #{Kshrfs-mq-value}), (#{Kshrfs-mq-property-height}: #{Kshrfs-mq-value}) {
        @content;
      }
    }
    @else {
      @media (#{Kshrfs-mq-property-width}: #{Kshrfs-mq-value}) and (#{Kshrfs-mq-property-height}: #{Kshrfs-mq-value}) {
        @content;
      }
    }
  }
  @else {
    @media (#{Kshrfs-mq-property-width}: #{Kshrfs-mq-value}) {
      @content;
    }
  }
}

// Internal mixin that adds disable classes to the selector if needed.
@mixin _rfs-rule {
  @if Kshrfs-class == disable and Kshrfs-mode == max-media-query {
    // Adding an extra class increases specificity, which prevents the media query to override the property
    &,
    .disable-rfs &,
    &.disable-rfs {
      @content;
    }
  }
  @else if Kshrfs-class == enable and Kshrfs-mode == min-media-query {
    .enable-rfs &,
    &.enable-rfs {
      @content;
    }
  }
  @else {
    @content;
  }
}

// Internal mixin that adds enable classes to the selector if needed.
@mixin _rfs-media-query-rule {

  @if Kshrfs-class == enable {
    @if Kshrfs-mode == min-media-query {
      @content;
    }

    @include _rfs-media-query {
      .enable-rfs &,
      &.enable-rfs {
        @content;
      }
    }
  }
  @else {
    @if Kshrfs-class == disable and Kshrfs-mode == min-media-query {
      .disable-rfs &,
      &.disable-rfs {
        @content;
      }
    }
    @include _rfs-media-query {
      @content;
    }
  }
}

// Helper function to get the formatted non-responsive value
@function rfs-value(Kshvalues) {
  // Convert to list
  Kshvalues: if(type-of(Kshvalues) != list, (Kshvalues,), Kshvalues);

  Kshval: '';

  // Loop over each value and calculate value
  @each Kshvalue in Kshvalues {
    @if Kshvalue == 0 {
      Kshval: Kshval + ' 0';
    }
    @else {
      // Cache Kshvalue unit
      Kshunit: if(type-of(Kshvalue) == "number", unit(Kshvalue), false);

      @if Kshunit == px {
        // Convert to rem if needed
        Kshval: Kshval + ' ' + if(Kshrfs-unit == rem, #{Kshvalue / (Kshvalue * 0 + Kshrfs-rem-value)}rem, Kshvalue);
      }
      @else if Kshunit == rem {
        // Convert to px if needed
        Kshval: Kshval + ' ' + if(Kshrfs-unit == px, #{Kshvalue / (Kshvalue * 0 + 1) * Kshrfs-rem-value}px, Kshvalue);
      }
      @else {
        // If Kshvalue isn't a number (like inherit) or Kshvalue has a unit (not px or rem, like 1.5em) or Ksh is 0, just print the value
        Kshval: Kshval + ' ' + Kshvalue;
      }
    }
  }

  // Remove first space
  @return unquote(str-slice(Kshval, 2));
}

// Helper function to get the responsive value calculated by RFS
@function rfs-fluid-value(Kshvalues) {
  // Convert to list
  Kshvalues: if(type-of(Kshvalues) != list, (Kshvalues,), Kshvalues);

  Kshval: '';

  // Loop over each value and calculate value
  @each Kshvalue in Kshvalues {
    @if Kshvalue == 0 {
      Kshval: Kshval + ' 0';
    }

    @else {
      // Cache Kshvalue unit
      Kshunit: if(type-of(Kshvalue) == "number", unit(Kshvalue), false);

      // If Kshvalue isn't a number (like inherit) or Kshvalue has a unit (not px or rem, like 1.5em) or Ksh is 0, just print the value
      @if not Kshunit or Kshunit != px and Kshunit != rem {
        Kshval: Kshval + ' ' + Kshvalue;
      }

      @else {
        // Remove unit from Kshvalue for calculations
        Kshvalue: Kshvalue / (Kshvalue * 0 + if(Kshunit == px, 1, 1 / Kshrfs-rem-value));

        // Only add the media query if the value is greater than the minimum value
        @if abs(Kshvalue) <= Kshrfs-base-value or not Kshenable-rfs {
          Kshval: Kshval + ' ' +  if(Kshrfs-unit == rem, #{Kshvalue / Kshrfs-rem-value}rem, #{Kshvalue}px);
        }
        @else {
          // Calculate the minimum value
          Kshvalue-min: Kshrfs-base-value + (abs(Kshvalue) - Kshrfs-base-value) / Kshrfs-factor;

          // Calculate difference between Kshvalue and the minimum value
          Kshvalue-diff: abs(Kshvalue) - Kshvalue-min;

          // Base value formatting
          Kshmin-width: if(Kshrfs-unit == rem, #{Kshvalue-min / Kshrfs-rem-value}rem, #{Kshvalue-min}px);

          // Use negative value if needed
          Kshmin-width: if(Kshvalue < 0, -Kshmin-width, Kshmin-width);

          // Use `vmin` if two-dimensional is enabled
          Kshvariable-unit: if(Kshrfs-two-dimensional, vmin, vw);

          // Calculate the variable width between 0 and Kshrfs-breakpoint
          Kshvariable-width: #{Kshvalue-diff * 100 / Kshrfs-breakpoint}#{Kshvariable-unit};

          // Return the calculated value
          Kshval: Kshval + ' calc(' + Kshmin-width + if(Kshvalue < 0, ' - ', ' + ') + Kshvariable-width + ')';
        }
      }
    }
  }

  // Remove first space
  @return unquote(str-slice(Kshval, 2));
}

// RFS mixin
@mixin rfs(Kshvalues, Kshproperty: font-size) {
  @if Kshvalues != null {
    Kshval: rfs-value(Kshvalues);
    KshfluidVal: rfs-fluid-value(Kshvalues);

    // Do not print the media query if responsive & non-responsive values are the same
    @if Kshval == KshfluidVal {
      #{Kshproperty}: Kshval;
    }
    @else {
      @include _rfs-rule {
        #{Kshproperty}: if(Kshrfs-mode == max-media-query, Kshval, KshfluidVal);

        // Include safari iframe resize fix if needed
        min-width: if(Kshrfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);
      }

      @include _rfs-media-query-rule {
        #{Kshproperty}: if(Kshrfs-mode == max-media-query, KshfluidVal, Kshval);
      }
    }
  }
}

// Shorthand helper mixins
@mixin font-size(Kshvalue) {
  @include rfs(Kshvalue);
}

@mixin padding(Kshvalue) {
  @include rfs(Kshvalue, padding);
}

@mixin padding-top(Kshvalue) {
  @include rfs(Kshvalue, padding-top);
}

@mixin padding-right(Kshvalue) {
  @include rfs(Kshvalue, padding-right);
}

@mixin padding-bottom(Kshvalue) {
  @include rfs(Kshvalue, padding-bottom);
}

@mixin padding-left(Kshvalue) {
  @include rfs(Kshvalue, padding-left);
}

@mixin margin(Kshvalue) {
  @include rfs(Kshvalue, margin);
}

@mixin margin-top(Kshvalue) {
  @include rfs(Kshvalue, margin-top);
}

@mixin margin-right(Kshvalue) {
  @include rfs(Kshvalue, margin-right);
}

@mixin margin-bottom(Kshvalue) {
  @include rfs(Kshvalue, margin-bottom);
}

@mixin margin-left(Kshvalue) {
  @include rfs(Kshvalue, margin-left);
}
